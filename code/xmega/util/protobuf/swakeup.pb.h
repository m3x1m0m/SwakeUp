/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Sun May 07 21:21:14 2017. */

#ifndef PB_SWAKEUP_PB_H_INCLUDED
#define PB_SWAKEUP_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MsgType {
    MsgType_MSG_TYPE_NONE = 0,
    MsgType_MSG_TYPE_POWER = 1,
    MsgType_MSG_TUPE_LOCATION = 16,
    MsgType_MSG_TYPE_DATE_TIME = 17,
    MsgType_MSG_TYPE_WEATHER = 18,
    MsgType_MSG_TYPE_SOCIAL = 19,
    MsgType_MSG_TYPE_MAIL = 20,
    MsgType_MSG_TYPE_ALARM_SET = 32,
    MsgType_MSG_TYPE_ALARM_GET = 33
} MsgType;
#define _MsgType_MIN MsgType_MSG_TYPE_NONE
#define _MsgType_MAX MsgType_MSG_TYPE_ALARM_GET
#define _MsgType_ARRAYSIZE ((MsgType)(MsgType_MSG_TYPE_ALARM_GET+1))

typedef enum _WeatherType {
    WeatherType_WEATHER_THUNDER = 0,
    WeatherType_WEATHER_SNOW = 1,
    WeatherType_WEATHER_RAIN = 2,
    WeatherType_WEATHER_CLOUDY = 3,
    WeatherType_WEATHER_OVERCAST = 4,
    WeatherType_WEATHER_SUN = 5
} WeatherType;
#define _WeatherType_MIN WeatherType_WEATHER_THUNDER
#define _WeatherType_MAX WeatherType_WEATHER_SUN
#define _WeatherType_ARRAYSIZE ((WeatherType)(WeatherType_WEATHER_SUN+1))

/* Struct definitions */
typedef struct _DateAndTime {
    uint8_t year;
    uint8_t month;
    uint8_t day;
    uint8_t hour;
    uint8_t minute;
    uint8_t second;
/* @@protoc_insertion_point(struct:DateAndTime) */
} DateAndTime;

typedef struct _Location {
    char country[8];
    char city[8];
/* @@protoc_insertion_point(struct:Location) */
} Location;

typedef struct _Weather {
    WeatherType weatherType;
    uint16_t temperature;
    char unit[1];
    char city[8];
    uint32_t sunrise;
    uint32_t sunset;
/* @@protoc_insertion_point(struct:Weather) */
} Weather;

typedef struct _MsgFrame {
    MsgType typ;
    bool request;
    Location location;
    pb_size_t which_pl;
    union {
        DateAndTime dateAndTime;
        Weather weather;
    } pl;
/* @@protoc_insertion_point(struct:MsgFrame) */
} MsgFrame;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Weather_init_default                     {(WeatherType)0, 0, "", "", 0, 0}
#define Location_init_default                    {"", ""}
#define DateAndTime_init_default                 {0, 0, 0, 0, 0, 0}
#define MsgFrame_init_default                    {(MsgType)0, 0, Location_init_default, 0, {DateAndTime_init_default}}
#define Weather_init_zero                        {(WeatherType)0, 0, "", "", 0, 0}
#define Location_init_zero                       {"", ""}
#define DateAndTime_init_zero                    {0, 0, 0, 0, 0, 0}
#define MsgFrame_init_zero                       {(MsgType)0, 0, Location_init_zero, 0, {DateAndTime_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define DateAndTime_year_tag                     1
#define DateAndTime_month_tag                    2
#define DateAndTime_day_tag                      3
#define DateAndTime_hour_tag                     4
#define DateAndTime_minute_tag                   5
#define DateAndTime_second_tag                   6
#define Location_country_tag                     1
#define Location_city_tag                        2
#define Weather_weatherType_tag                  1
#define Weather_temperature_tag                  2
#define Weather_unit_tag                         3
#define Weather_city_tag                         4
#define Weather_sunrise_tag                      5
#define Weather_sunset_tag                       6
#define MsgFrame_dateAndTime_tag                 16
#define MsgFrame_weather_tag                     17
#define MsgFrame_typ_tag                         1
#define MsgFrame_request_tag                     2
#define MsgFrame_location_tag                    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Weather_fields[7];
extern const pb_field_t Location_fields[3];
extern const pb_field_t DateAndTime_fields[7];
extern const pb_field_t MsgFrame_fields[6];

/* Maximum encoded size of messages (where known) */
#define Weather_size                             33
#define Location_size                            20
#define DateAndTime_size                         36
#define MsgFrame_size                            65

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SWAKEUP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
